# -*- coding = utf-8 -*-
import argparse
from ..utils.subcommand import *


def add_circrna_optin():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-c", '--circRNA', help='Candidate circRNAs in Fasta format',
                        dest='circRNA',
                        default=None)
    return parser


def add_output_dir():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-o", "-O", "--output",
                        help="Output directory, if not given,the result will be saved in current directory",
                        default='./',
                        required=False)
    return parser


def add_output_file():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-o", "-O", "--output",
                        help="Output file",
                        required=True)
    return parser


def add_threads():
    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("-t", "--threads",
                        help=" Number of processes during program runtime , default to 4 ",
                        default=4,
                        type=int,
                        required=False)
    return parser


def add_general_parameters():
    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("--draw_visualization",
                        help="Draw a visual image of CircRNA ORF(All ,None or Longest), default to all ",
                        default="All",
                        choices=["All", "None", "Longest"],
                        required=False)

    parser.add_argument("--retain_temp_file",
                        help="retain temporary files :False/True , default to True ",
                        default=False,
                        choices=[True, False],
                        type=bool,
                        required=False)
    return parser


def ribo_argparse():
    parser = argparse.ArgumentParser(prog="Ribo",
                                     add_help=False)
    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-S', '--single',
                       dest="single",
                       action="append",
                       help="Ribo seq sequencing source file",
                       default=None)
    group.add_argument('-P', '--paired',
                       help="Ribo seq sequencing source file",
                       dest="paired",
                       nargs=2,
                       action="extend",
                       default=None)

    parser.add_argument("-g", '--transcript', help='Transcript.fna of interest specices from NCBI.',
                        dest="transcript",
                        default=None)

    parser.add_argument("-r", '--ribosome', help='Ribosome sequence file in fasta format for species of interest',
                        dest="ribosome",
                        default=None)

    return parser


def ms_argparse():
    parser = argparse.ArgumentParser(prog="MS",
                                     add_help=False)

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-p', '--peptide', help="peptide file generated by MAXQuant or MSGF.",
                        default=None)
    group.add_argument('--clear_peptide', help="peptide file, format: 'Sequence\tProteins'",
                        default=None)
    parser.add_argument('-j', '--junction', help="The junction file generated by the junction command",
                        default=None, required=False)
    return parser


def both_argparse():
    parser = argparse.ArgumentParser(prog="Both",
                                     parents=[ribo_argparse(), ms_argparse()],
                                     add_help=False)
    return parser


def DLMSC_argparse():
    parser = argparse.ArgumentParser(prog="DLMSC",
                                     add_help=False)

    parser.add_argument("--predict_fa",
                        action="store",
                        dest='predict_fa',
                        required=True,
                        help="predict fasta file, termination codon, with sequences of 50bp before and after, totaling 103bp in length")
    parser.add_argument("--model_path",
                        action="store",
                        dest='model_path',
                        help="model path, defaults to our model")

    return parser


def DeepCircm6A_argparse():
    parser = argparse.ArgumentParser(prog="DeepCircm6A",
                                     add_help=False)

    parser.add_argument("--predict_fasta",
                        action="store",
                        dest='predict_fa',
                        required=True,
                        help="predict fasta file")
    parser.add_argument("--mode",
                        action="store",
                        dest='mode',
                        choices=["linear", "circular"],
                        required=True,
                        help="The linear mode will treat the sequence as a linear sequence, and the A sites within the 25bp region before and after the sequence will not be considered when extracting the A sites.\nThe circular pattern will process the sequence in a circular sequence, extract all A sites in a cyclic manner, and predict")
    parser.add_argument("--model_path",
                        action="store",
                        dest='model_path',
                        help="model path, defaults to our model")

    return parser


def Draw_argparse():

    parser = argparse.ArgumentParser(prog="Draw",
                                     add_help=False)

    parser.add_argument("--m6A",
                        action="store",
                        dest='m6A_file',
                        required=True,
                        help="DeepCircm6A result file")

    parser.add_argument("--orf_info",
                        action="store",
                        dest='orf_info',
                        required=True,
                        help="src output orf info file")

    parser.add_argument("--type",
                        help="Types to be drawn: Mass spectrometry or Ribo seq",
                        default="All",
                        choices=["MS", "Ribo"],
                        required=True)

    parser.add_argument("--draw_visualization",
                        help="Draw a visual image of CircRNA ORF(All ,None or Longest), default to all ",
                        default="All",
                        choices=["All", "None", "Longest"],
                        required=False)

    return parser

def init_argparse():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.set_defaults(func = command_main)

    subparsers = parser.add_subparsers()
    subparsers.add_parser("Ribo",
                          description="Search for fragments in candidate CircRNAs that can be supported by the provided Ribo seq data, and evaluate the translation potential of related ORFs",
                          parents=[ribo_argparse(), add_circrna_optin(), add_threads(), add_output_dir(), add_general_parameters()]).set_defaults(func = sub_command_Ribo_seq_process)

    subparsers.add_parser("MS",
                          description="Search for fragments in candidate CircRNAs that can be supported by the provided Mass Spectrum data, and evaluate the translation potential of related ORFs",
                          parents=[ms_argparse(), add_circrna_optin(), add_threads(), add_output_dir(), add_general_parameters()]).set_defaults(func = sub_command_mass_spectrum_process)

    subparsers.add_parser("Both",
                          description="Search for fragments in candidate CircRNAs that can be supported by the provided Mass Spectrum data and Ribo seq data, and evaluate the translation potential of related ORFs",
                          parents=[both_argparse(), add_circrna_optin(), add_threads(), add_output_dir(), add_general_parameters()]).set_defaults(func = sub_command_both_process)

    subparsers.add_parser("Junction",
                          description="Translate the approximately 100bp junction site of the candidate CircRNA into protein sequences using six forward and reverse reading frames, and provide them to mass spectrometry software as reference sequences",
                          parents=[add_circrna_optin(), add_output_file()]).set_defaults(func = sub_command_junction_process)

    subparsers.add_parser("DLMSC",
                          description="A tool for evaluating the translation potential of CircRNA ORF from the perspective of termination codons",
                          parents=[DLMSC_argparse(), add_output_file()]).set_defaults(func = sub_command_DLMSC_process)

    subparsers.add_parser("DeepCircm6A",
                          description="CircRNA m6A modification site, predictive evaluation tool.The model will predict the possibility of modification based on a total of 51bp sequence modifications before and after the A site.",
                          parents=[DeepCircm6A_argparse(), add_threads(), add_output_file()]).set_defaults(func = sub_command_DeepCircm6A_process)

    subparsers.add_parser("Draw",
                          description="Draw visualization images of circRNA",
                          parents=[Draw_argparse(), add_circrna_optin(), add_threads(), add_output_dir()]).set_defaults(func = sub_command_Draw_process)
    return parser


if __name__ == '__main__':
    parser = init_argparse()
    args = parser.parse_args()
    args.func(args)

    parser.parse_args()
